const CONFIG = { QT_MULTIPLE: "QT_MULTIPLE", QT_SINGLE: "QT_SINGLE", AT_TEXT: "AT_TEXT", AT_IMAGE: "AT_IMAGE", AT_MIX: "AT_MIX", RT_PROGRESS_BAR: "RT_PROGRESS_BAR", RT_GRAPHIC: "RT_GRAPHIC", RT_TEXT: "RT_TEXT" }; function Quiz(e) { printVersion ? this.renderPrintVersion(e) : this.render(e) } Quiz.prototype.renderPrintVersion = function (e) { let t = e.querySelectorAll("quiz"); t && t.forEach(e => { let t = quizes.find(t => t.elementId === e.getAttribute("id")); for (let n = 0; quizes[0].questions.length > n; n++) { let d = document.createElement("div"); d.classList.add("quiz"), d.setAttribute("id", `${t.elementId}`); let i = document.createElement("div"); i.classList.add("body"); let l = document.createElement("div"); l.classList.add("question-quiz"), l.setAttribute("data-index", 0); let s = document.createElement("h2"), a = document.createElement("span"); a.classList.add("question-text-quiz"); let o = document.createElement("div"); o.classList.add("options-container"); let r = document.createElement("ul"); if (r.classList.add("options-quiz-print"), this.loadQuestionPrintVersion(n, s, a, r, t), s.appendChild(a), l.appendChild(s), o.appendChild(r), l.appendChild(o), i.appendChild(l), d.appendChild(i), e.appendChild(d), quizes[0].questions.length - 1 == n) { const e = "<div class='col-10'>\n                        <h1>Atenção !</h1>\n                        <p>O feedback para essa atividade é baseado no conjunto de suas respostas, dessa forma, só pode ser visualizado na versão online.</p>\n                    </div>"; d.innerHTML = e } } }) }, Quiz.prototype.loadQuestionPrintVersion = function (e, t, n, d, i) { this.loadTitle(e, t, n, i), this.loadAlternatives(i.questions[e].answers, d, i.questions[e]) }, Quiz.prototype.render = function (e) { let t = e.querySelectorAll("quiz"); t && t.forEach(e => { let t = quizes.find(t => t.elementId === e.getAttribute("id")), n = document.createElement("div"); n.classList.add("quiz"), n.setAttribute("id", `${t.elementId}`); let d = document.createElement("div"); d.classList.add("body"); let i = document.createElement("div"); i.classList.add("progress-quiz"); let l = document.createElement("div"); l.classList.add("progress-fill-quiz"); let s = document.createElement("span"); s.classList.add("progress-text-quiz"), document.createElement("span").classList.add("current-progress-quiz"), document.createElement("span").classList.add("total-progress-quiz"); let a = document.createElement("div"); a.classList.add("question-quiz"), a.setAttribute("data-index", 0); let o = document.createElement("h2"), r = document.createElement("span"); r.classList.add("question-text-quiz"); let c = document.createElement("div"); c.classList.add("options-container"); let u = document.createElement("ul"); u.classList.add("options-quiz"); let p = document.createElement("div"); p.classList.add("actions-quiz"); let m = document.createElement("button"); m.classList.add("button-quiz"), "en-us" == htmlLanguage ? m.append("Next") : m.append("Próxima"), m.addEventListener("click", e => { if (u.querySelector("label.checked")) { let e = parseInt(a.getAttribute("data-index")), i = e + 1; t.questions[e].userAnswers = this.getAnswers(u), i === t.questions.length ? (this.loadResults(this.finishQuiz(t), d, t), window.scroll(0, n.offset().top)) : (this.loadQuestion(i, o, r, s, u, t, m), a.setAttribute("data-index", i), window.scroll(0, o.offset().top)) } else alert("Atenção, pelo menos uma opção deve ser marcada!") }), this.loadQuestion(0, o, r, s, u, t), l.appendChild(s), i.appendChild(l), d.appendChild(i), o.appendChild(r), a.appendChild(o), c.appendChild(u), a.appendChild(c), d.appendChild(a), p.appendChild(m), a.appendChild(p), n.appendChild(d), e.replaceWith(n) }) }, Quiz.prototype.loadQuestion = function (e, t, n, d, i, l, s) { this.loadProgress(e, d, l), this.loadTitle(e, t, n, l), this.loadAlternatives(l.questions[e].answers, i, l.questions[e]), e === l.questions.length - 1 && (s.innerHTML = "Finalizar") }, Quiz.prototype.loadProgress = function (e, t, n) { let d = e + 1; t.innerHTML = `${d} de ${n.questions.length}`, document.documentElement.style.setProperty("--progress-percentage", percent(e + 1, n.questions.length) + "%") }, Quiz.prototype.loadTitle = function (e, t, n, d) { d.questions[e].imgTitle && (t.style.backgroundImage = `url('${d.questions[e].imgTitle}')`), n.innerHTML = d.questions[e].title }, Quiz.prototype.loadAlternatives = function (e, t, n) { t.querySelector("li") && t.querySelectorAll("li").forEach(e => { e.remove() }), e.forEach((e, d) => { let i = document.createElement("li"); i.classList.add("option-quiz"); let l = document.createElement("label"); l.classList.add("option-quiz"), l.setAttribute("data-index", d); let s = document.createElement("input"); s.setAttribute("name", "answer"), n.questionType === CONFIG.QT_MULTIPLE ? (s.setAttribute("type", "checkbox"), s.addEventListener("click", e => { s.checked ? l.classList.add("checked") : l.classList.remove("checked") })) : (s.setAttribute("type", "radio"), s.addEventListener("click", e => { l.closest(".options-quiz").querySelectorAll(".option-quiz label").forEach(e => { e.classList.remove("checked") }), l.classList.add("checked") })), l.appendChild(s), l.appendChild(document.createTextNode(` ${e.text}`)), i.appendChild(l), t.append(i) }) }, Quiz.prototype.getAnswers = function (e) { let t = []; return e.querySelectorAll("label.checked").forEach(e => { t.push($(e).attr("data-index")) }), t }, Quiz.prototype.finishQuiz = function (e) { let t = 0; e.questions.forEach(e => { e.userAnswers.forEach(n => { answer = e.answers[n], answer.type.cont ? answer.type.cont++ : answer.type.cont = 1, t++ }) }); let n = e.questions[0].answers, d = []; return n.forEach(e => { e.type.cont && (e.type.percent = percent(e.type.cont, t).toFixed(0), d.push(e.type)) }), d }, Quiz.prototype.loadResults = function (e, t, n) { let d = document.createElement("div"); if (d.classList.add("quiz-results"), n.resultTitle) { let e = document.createElement("h2"); e.classList.add("title-result-quiz"), e.innerHTML = n.resultTitle, d.appendChild(e) } switch (n.resultType) { case CONFIG.RT_PROGRESS_BAR: this.progressBarResultBuilder(e, d); break; case CONFIG.RT_GRAPHIC: this.graphicResultBuilder(e, d, n); break; case CONFIG.RT_TEXT: this.textResultBuilder(e, d) }t.replaceWith(d) }, Quiz.prototype.graphicResultBuilder = function (e, t, n) { let d = { type: "doughnut", data: { datasets: [{ data: [], backgroundColor: [], borderColor: [], borderWidth: 1, hoverBorderColor: "#FFF" }] }, options: { responsive: !0, legend: { position: "bottom", labels: { padding: 30 }, onClick: function (t, n) { abrirModal(`${e[n.index].legend}`) } }, tooltips: { callbacks: { label: function (t, n) { var d = n.datasets[t.datasetIndex]; return e[t.index].legend + ": " + d.data[t.index] + "%" } } } } }; e.forEach(e => { d.data.datasets[0].data.push(e.percent), d.data.datasets[0].backgroundColor.push(e.color), d.data.datasets[0].borderColor.push(e.borderColor) }); let i = document.createElement("canvas"); i.setAttribute("id", `result-${n.elementId}`), i.classList.add("quiz-graphic-result"); let l = document.createElement("div"); l.classList.add("div-graphic-result"), l.appendChild(i), t.appendChild(l); new Chart(i, d); t.appendChild(this.legendsBuilder(e, t)) }, Quiz.prototype.legendsBuilder = function (e, t) { let n = document.createElement("ul"); return n.classList.add("legends-result-quiz"), e.forEach((e, d) => { let i = document.createElement("li"); i.classList.add("container-legend-result-quiz"); let l = document.createElement("div"); l.classList.add("color-legend-quiz"), l.style.backgroundColor = e.color; let s = document.createElement("span"); s.classList.add("text-legend-quiz"), s.appendChild(document.createTextNode(e.legend)), i.addEventListener("click", t => { abrirModal(`${e.legend}`) }), this.feedbackModalBuilder(e, t), i.appendChild(l), i.appendChild(s), n.appendChild(i) }), n }, Quiz.prototype.feedbackModalBuilder = function (e, t) { let n = document.createElement("em-modal"); n.setAttribute("name", e.legend); let d = document.createElement("div"); d.classList.add("container"); let i = document.createElement("div"); i.classList.add("row", "align-items-center", "justify-content-centerv"); let l = document.createElement("div"); l.classList.add("col-12", "col-md-12", "col-lg-12"); let s = document.createElement("div"); s.classList.add("modal-title-result"), s.innerHTML = e.title; let a = document.createElement("div"); a.classList.add("modal-content-result"); let o = document.createElement("p"); o.innerHTML = e.feedback, l.appendChild(s), a.appendChild(o), l.appendChild(a), i.appendChild(l), d.appendChild(i), n.appendChild(d), t.appendChild(n), modalList[e.legend] = new Modal(n, t) }, Quiz.prototype.progressBarResultBuilder = function (e, t) { e.forEach((e, n) => { let d = document.createElement("div"); d.classList.add("percent-container"), d.setAttribute("data-index", n); let i = document.createElement("span"); i.classList.add("percent-title"), i.innerHTML = e.legend; let l = document.createElement("div"); l.classList.add("percent"); let s = document.createElement("div"); s.classList.add("percent-fill"), s.style.width = e.percent + "%"; let a = document.createElement("span"); a.classList.add("percent-value"), a.innerHTML = e.percent + "%"; let o = document.createElement("i"); o.classList.add("fas", "fa-info-circle", "info-icon-percent"), o.addEventListener("click", t => { abrirModal(`${e.legend}`) }), this.feedbackModalBuilder(e, t), d.appendChild(i), l.appendChild(s), l.appendChild(a), d.appendChild(l), d.appendChild(o), t.appendChild(d) }) }, Quiz.prototype.textResultBuilder = function (e, t) { let n; e.forEach(e => { n ? e.cont > n.cont && (n = e) : n = e }); let d = document.createElement("div"); d.classList.add("quiz-text-result", "p-5", n.color ? n.color : ""); let i = document.createElement("div"); i.classList.add("row", "justify-content-center"), i.innerHTML = n.title, i.innerHTML += n.feedback, d.appendChild(i), t.appendChild(d) }, Quiz.prototype.removeModal = function (e) { e.closest(".modal-fade-result").remove(), document.querySelector("body").classList.toggle("modal-showing") };